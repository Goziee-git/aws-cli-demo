✅ Prerequisites
- AWS CLI installed and configured (aws configure)

- IAM user with appropriate permissions (EC2, VPC, IAM, etc.)

- A valid key pair name you want to use (or create a new one in this script)

⬇️ Here's a step-by-step guide to create a development setup for a virtual machine on AWS using the AWS CLI, which includes:

STEP 1: Creating a custom VPC using the cLI commands below.

VPC_ID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 \
    --query 'Vpc.VpcId' --output text)
echo "VPC ID: $VPC_ID"

>> OUTPUT: VPC ID: vpc-0cd8deaa2f89a752e

STEP 2: Creating a subnet in that VPC using the aws cli commands below.
 
SUBNET_ID=$(aws ec2 create-subnet --vpc-id $VPC_ID \
    --cidr-block 10.0.1.0/24 --availability-zone us-east-1a \
    --query 'Subnet.SubnetId' --output text)
echo "Subnet ID: $SUBNET_ID"

>> OUTPUT: Subnet ID: subnet-0ddff8db5e4115591

STEP 3: Creating an internet gateway and attaching it. Use the aws cli command below

IGW_ID=$(aws ec2 create-internet-gateway \
    --query 'InternetGateway.InternetGatewayId' --output text)
echo "Internet Gateway ID: $IGW_ID"

>> OUTPUT: Internet Gateway ID: igw-0755dcb5ace89af45

STEP 4: ATTACH INTERNET GATEWAY AND ATTACH TO THE VPC

aws ec2 attach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id $VPC_ID

STEP 5: CREATE A ROUTE TABLE FOR THE VPC

ROUTE_TABLE_ID=$(aws ec2 create-route-table --vpc-id $VPC_ID \
    --query 'RouteTable.RouteTableId' --output text)
echo "Route Table ID: $ROUTE_TABLE_ID"

>> OUTPUT: Route Table ID: rtb-0b33e6622f69a8d19

STEP 6: USE THIS COMMAND TO ATTACH THE ROUTE TABLE TO ASSOCIATE THE ROUTE TABLE TO THE INTERNET GATEWAY TO ALLOW INTERNET INTO THE VPC

aws ec2 create-route --route-table-id $ROUTE_TABLE_ID \
    --destination-cidr-block 0.0.0.0/0 --gateway-id $IGW_ID

>> OUTPUT: 

{
    "Return": true
}

STEP 7: ASSOCIATE THE SUBNET WITH THE ROUTE TABLE

aws ec2 associate-route-table --subnet-id $SUBNET_ID \
    --route-table-id $ROUTE_TABLE_ID

>> OUTPUT: 

{
    "AssociationId": "rtbassoc-0d59d2cf129cbd759",
    "AssociationState": {
        "State": "associated"
    }
}

STEP 8: MODIFY THE SUBNET TO ENABLE AUTO ASSIGN PUBLIC Ip 

aws ec2 modify-subnet-attribute --subnet-id $SUBNET_ID \
    --map-public-ip-on-launch

>> OUTPUT: SUBNET WILL BE AUTO ASSIGNED PUBLIC IP

STEP 9: CREATE A SECURITY GROUP NAMED TEST-SECURITY-GROUP

SG_ID=$(aws ec2 create-security-group --group-name Test-Security-Group \
    --description "Security group for development VM" --vpc-id $VPC_ID \
    --query 'GroupId' --output text)
echo "Security Group ID: $SG_ID"

>> OUTPUT: Security Group ID: sg-05957ec0c590f6bb7

STEP 10: ADD INBOUND RULE FOR SECURITY GROUP FOR SSH AND HTTP

aws ec2 authorize-security-group-ingress --group-id $SG_ID \
    --protocol tcp --port 22 --cidr 0.0.0.0/0

aws ec2 authorize-security-group-ingress --group-id $SG_ID \
    --protocol tcp --port 80 --cidr 0.0.0.0/0

>> OUTPUT: 

{
    "Return": true,
    "SecurityGroupRules": [
        {
            "SecurityGroupRuleId": "sgr-01e762eec5b764b69",
            "GroupId": "sg-05957ec0c590f6bb7",
            "GroupOwnerId": "814647154673",
            "IsEgress": false,
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIpv4": "0.0.0.0/0",
            "SecurityGroupRuleArn": "arn:aws:ec2:us-east-1:814647154673:security-group-rule/sgr-01e762eec5b764b69"
        }
    ]
}
{
    "Return": true,
    "SecurityGroupRules": [
        {
            "SecurityGroupRuleId": "sgr-003124971f4fc73fd",
            "GroupId": "sg-05957ec0c590f6bb7",
            "GroupOwnerId": "814647154673",
            "IsEgress": false,
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIpv4": "0.0.0.0/0",
            "SecurityGroupRuleArn": "arn:aws:ec2:us-east-1:814647154673:security-group-rule/sgr-003124971f4fc73fd"
        }
    ]
}

STEP 11: CREATE A KEY PAIR (dev-key)

KEY_NAME="dev-key"
aws ec2 create-key-pair --key-name $KEY_NAME \
    --query 'KeyMaterial' --output text > ${KEY_NAME}.pem

---- > USE THIS COMMAND TO SEE THE CREATED KEY PAIRS 
 aws ec2 describe-key-pairs --query "KeyPairs[*].KeyName" --output table

 >> OUTPUT: 
 ----------------------------------
|        DescribeKeyPairs        |
+--------------------------------+
|  MycliKeyPair                  |
|  dev-key                       |
|  prospa-demo-key-pair-for-waf  |
|  demo-key-pair-waf             |
|  demo-waf-ec2-keypair          |
+--------------------------------+

STEP 12:  CHANGE KEY PERMISSIONS
chmod 700 ${KEY_NAME}.pem

STEP 13: GET THE APPROPRIATE AMI FOR THE UBUNTU OS, (t2.micro in the us-east1-region) FREE TIER

aws ec2 describe-images \
  --owners 099720109477 \
  --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*" \
            "Name=architecture,Values=x86_64" \
            "Name=root-device-type,Values=ebs" \
            "Name=virtualization-type,Values=hvm" \
  --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
  --output text

OUTPUT: ami-0a7d80731ae1b2435

STEP 14: LAUNCH THE EC2 INSTANCE USING THIS COMMAND, NOTE WE HAVE ATTACHED THE AMI HERE

INSTANCE_ID=$(aws ec2 run-instances \
    --image-id ami-0a7d80731ae1b2435 \ 
    --count 1 --instance-type t2.micro \
    --key-name $KEY_NAME \
    --security-group-ids $SG_ID \
    --subnet-id $SUBNET_ID \
    --associate-public-ip-address \
    --query 'Instances[0].InstanceId' --output text)
echo "Instance ID: $INSTANCE_ID"

Launching an EC2 instance.

OUPUT: EC2 IS LAUNCHED WITH THE ID: Instance ID: i-0ac284c1aa7305056

STEP 15:  THE EC2 IS RUNNING: 

aws ec2 describe-instances --instance-ids i-0ac284c1aa7305056 \
  --query "Reservations[*].Instances[*].State.Name" --output text

>> OUTPUT: running

STEP 16: GET THE PUBLIC IPV4 ADDRESS OF THE EC2 INSTANCE

PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID \
    --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
echo "EC2 instance launched with public IP: $PUBLIC_IP"

OUTPUT: EC2 instance launched with public IP: 3.83.252.185

STEP 17 : SSH INTO THE INSTANCE

ssh i dev-key.pem ubuntu@ipv4-address
